@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix odrl: <http://www.w3.org/ns/odrl/2/> .
@prefix ids: <https://w3id.org/idsa/core/> .
@prefix idsc: <https://w3id.org/idsa/code/> .

# Template
# --------

idsc:RENTAL_REQUEST_TEMPLATE a ids:RentalRequest ;
    rdfs:label "Data Rental Request Template" ;
    sh:labelTemplate """The Consumer requests permission to perform a defined Action on a potential Provider's Asset and offers
    to pay the regular ?fee."""@en ;
    rdfs:comment "This template models the rental of data."@en ;
    skos:note "rdfs:label, rdfs:comment, sh:labelTemplate, and skos:note annotations are _not_ part of the template itself!"@en ;
    (
      (ids:provider idsc:PARTICIPANT_TEMPLATE ;)
    | # or
      (ids:consumer idsc:PARTICIPANT_TEMPLATE ;)
    | # or
      (ids:provider idsc:PARTICIPANT_TEMPLATE ;
       ids:consumer idsc:PARTICIPANT_TEMPLATE ;)
    )
    odrl:permission[
        a odrl:Permission ;
        (
          (odrl:assigner idsc:PARTICIPANT_TEMPLATE ;)        # same value as ids:provider
        | # or
          (odrl:assignee idsc:PARTICIPANT_TEMPLATE ;)        # same value as ids:consumer
        | # or
          (odrl:assigner idsc:PARTICIPANT_TEMPLATE ;         # same value as ids:provider
           odrl:assignee idsc:PARTICIPANT_TEMPLATE ;)        # same value as ids:consumer
        )
        ids:target idsc:ASSET_TEMPLATE ;
        odrl:action idsc:ACTION_TEMPLATE ;
        odrl:constraint [
            a odrl:Constraint ;
            odrl:leftOperand idsc:STATE ;
            odrl:operator idsc:NOT ;
            odrl:rightOperand ?terminationState ;            # An entity expressing the (final) state that the contract has been terminated by either one of the involved parties.
            ( ids:pipEndpoint ?pipUri ; )?                  # The location where to find this state.
        ] ;
        ids:preDuty [
            a odrl:Duty ;
            (
              (odrl:assigner idsc:PARTICIPANT_TEMPLATE ;)        # same value as ids:provider
            | # or
              (odrl:assignee idsc:PARTICIPANT_TEMPLATE ;)        # same value as ids:consumer
            | # or
              (odrl:assigner idsc:PARTICIPANT_TEMPLATE ;         # same value as ids:provider
               odrl:assignee idsc:PARTICIPANT_TEMPLATE ;)        # same value as ids:consumer
            )
            odrl:action [
                a odrl:Action ;
                odrl:includedIn odrl:compensate ;
                ids:actionRefinement [
                    a odrl:Constraint ;
                    odrl:leftOperand odrl:payAmount ;
                    odrl:operator odrl:eq ;
                    odrl:rightOperand "?fee"^^xsd:double ;   # pay the ?fee
                    odrl:unit ?currency ;
                    ( ids:pipEndpoint ?pipUri ; )?
                ]
            ] ;
            odrl:constraint [
                a odrl:Constraint ;
                odrl:leftOperand idsc:POLICY_EVALUATION_TIME ;
                odrl:operator idsc:AFTER ;
                odrl:rightOperand ?duration ;                # for a certain usage ?duration
            ]
        ] ;
        ( odrl:constraint idsc:CONSTRAINT_TEMPLATE ; )*      # zero or more Constraints
        ( ids:preDuty idsc:OBLIGATION_TEMPLATE ; )*   # zero or more additional Obligations which need to be fulfilled before the Usage event
        ( ids:postDuty idsc:OBLIGATION_TEMPLATE ; )*  # zero or more Obligations which have to be fulfilled after the Usage event
    ]
.
